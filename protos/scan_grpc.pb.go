// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: scan.proto

// https://cloud.google.com/apis/design/versioning

package base

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scan_Run_FullMethodName = "/amaas.scan.v1.Scan/Run"
)

// ScanClient is the client API for Scan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type ScanClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[C2S, S2C], error)
}

type scanClient struct {
	cc grpc.ClientConnInterface
}

func NewScanClient(cc grpc.ClientConnInterface) ScanClient {
	return &scanClient{cc}
}

func (c *scanClient) Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[C2S, S2C], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scan_ServiceDesc.Streams[0], Scan_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[C2S, S2C]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scan_RunClient = grpc.BidiStreamingClient[C2S, S2C]

// ScanServer is the server API for Scan service.
// All implementations must embed UnimplementedScanServer
// for forward compatibility.
//
// Interface exported by the server.
type ScanServer interface {
	Run(grpc.BidiStreamingServer[C2S, S2C]) error
	mustEmbedUnimplementedScanServer()
}

// UnimplementedScanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScanServer struct{}

func (UnimplementedScanServer) Run(grpc.BidiStreamingServer[C2S, S2C]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedScanServer) mustEmbedUnimplementedScanServer() {}
func (UnimplementedScanServer) testEmbeddedByValue()              {}

// UnsafeScanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScanServer will
// result in compilation errors.
type UnsafeScanServer interface {
	mustEmbedUnimplementedScanServer()
}

func RegisterScanServer(s grpc.ServiceRegistrar, srv ScanServer) {
	// If the following call pancis, it indicates UnimplementedScanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scan_ServiceDesc, srv)
}

func _Scan_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScanServer).Run(&grpc.GenericServerStream[C2S, S2C]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scan_RunServer = grpc.BidiStreamingServer[C2S, S2C]

// Scan_ServiceDesc is the grpc.ServiceDesc for Scan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amaas.scan.v1.Scan",
	HandlerType: (*ScanServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Scan_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "scan.proto",
}
